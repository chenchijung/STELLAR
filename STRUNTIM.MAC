	title	Stellar run time routine Rev 1.0  05/15/1 84
	name	('runtim')
.z80
;*************************************************
;*                                               *
;*      Stellar run time routine  ( Rev 1.0 )    *
;*                                               *
;*                              05/15/1984       *
;*                                               *
;*        Copyright (c) 1984 H.Ohnuki / MIA      *
;*                                               *
;*************************************************

;-------------------------------------------------
;		    run time
;-------------------------------------------------

		cseg
;
;	**  run time entry  **
;
@start::	jp	main	;exec main program
@stop::		jp	stop	;stop run
@mul.m::	jp	mul.m	;multiply    a := a * m(hl)
@mul.r::	jp	mul.r	;multiply    a := a * d
@div.m::	jp	div.m	;divide      a := a / m(hl)
@div.r::	jp	div.r	;devide	     a := a / d
@rem.m::	jp	rem.m	;remainder   a := a % m(hl)
@rem.r::	jp	rem.r	;remainder   a := a % d
@shl.m::	jp	shl.m	;shift left  a := a << m(hl)
@shl.r::	jp	shl.r	;shift left  a := a << d
@shr.m::	jp	shr.m	;shift right a := a >> m(hl)
@shr.r::	jp	shr.r	;shift right a := a >> d
@setag::	jp	setag	;set argument

;
;	**  multiply  **
;
; entry  @mul.m  ....  a := a * m(hl)
; entry  @mul.r  ....  a := a * d
;
mul.m:
	ld	e,(hl)
	defb	0feh
mul.r:	
	ld	e,d
	ld	d,0
	ld	l,d
	ld	h,a
	ld	a,8
mul.1:
	add	hl,hl
	jr	nc,mul.2
	add	hl,de
mul.2:
	dec	a
	jr	nz,mul.1
	ld	a,l
	ret
;
;	**  divide  **
;
; entry  @div.m  ....  a := a / m(hl)
; entry  @div.r  ....  a := a / d
;
div.m:
@1:	call	rem.m
	ld	a,e
	ret
div.r:
@2:	call	rem.r
	ld	a,e
	ret
;
;	**  reminder  **
;
; entry  @rem.m  ....  a := a % m(hl)
; entry  @rem.r  ....  a := a % d
;
rem.m:
	ld	d,(hl)
rem.r:
	ld	e,a
	xor	a
	ld	l,8
rem.1:
	sla	e
	rla
	cp	d
	jr	c,rem.2
	sub	d
	inc	e
rem.2:
	dec	l
	jr	nz,rem.1
	ret
;
;	**  shift left  **
;
; entry  @shl.m  ....  a := a << m(hl)
; entry  @shl.r  ....  a := a << d
;
shl.m:
	ld	d,(hl)
shl.r:
	inc	d
	dec	d
	ret	z
	ld	e,a
	ld	a,d
	cp	9
	ld	a,0
	ret	nc
	ld	a,e
shl.1:
	add	a,a
	dec	d
	jr	nz,shl.1
	ret
;
;	**  shift right  **
;
; entry  @shr.m  ....  a := a >> m(hl)
; entry  @shr.r  ....  a := a >> d
;
shr.m:
	ld	d,(hl)
shr.r:
	inc	d
	dec	d
	ret	z
	ld	e,a
	ld	a,d
	cp	9
	ld	a,0
	ret	nc
	ld	a,e
shr.1:
	srl	a
	dec	d
	jr	nz,shr.1
	ret
;
;	** push local variable & move actual argument to dummy argument  **
;
; entry     @setag
; parameter c : dummy argument length (0...32)
;	    de: local variable area size ( reg de = 0 : non recursive )
;	    hl: local variable area address ( dummy argument address )
;
setag:
?1:	ld	(pshadr),hl
??2:	ld	(pshsiz),de
	pop	hl
?3:	ld	(retad1),hl
	pop	hl
?4:	ld	(retad2),hl
?5:	ld	a,(arglen)
	or	a
	jr	z,setag2
?6:	ld	hl,actarg-1
	ld	e,a
	ld	d,0
	add	hl,de
	ld	b,a
setag1:
	pop	af
	ld	(hl),a
	dec	hl
	djnz	setag1
setag2:
?7:	ld	hl,(retad2)
	push	hl
?8:	ld	hl,(pshsiz)
	ld	a,h
	or	l
	jr	z,setag3
	ex	de,hl
	ld	hl,0
	sbc	hl,de
	add	hl,sp
	ld	sp,hl
	push	bc
	ld	b,d
	ld	c,e
	ex	de,hl
?9:	ld	hl,(pshadr)
	ldir
	pop	bc
?10:	ld	hl,(pshadr)
	push	hl
?11:	ld	hl,(pshsiz)
	push	hl
@3:	ld	hl,poplv
	push	hl
setag3:
	ld	a,c
	or	a
	jr	z,setag4
?12:	ld	hl,(pshadr)
	ex	de,hl
?13:	ld	hl,actarg
	ld	b,0
	ldir
setag4:
?14:	ld	hl,(retad1)
	jp	(hl)
;
;	**  pop local variable  **
;
poplv:
	pop	bc
	pop	de
	ld	hl,0
	add	hl,sp
	ldir
	ld	sp,hl
	ret
;
;	**  stop run  **
;
stop:
?15:	ld	a,(@stptp)
	or	a		;halt ?
	jr	nz,stop2
stop1:
	halt
	jr	stop1
stop2:
	dec	a		;return ?
	jr	nz,stop3
??16:	ld	sp,(@retad)
	ret
stop3:
	dec	a		;jump ?
	jr	nz,stop1
?17:	ld	hl,(@retad)
	jp	(hl)
	
;
;	** beginning of main routine  **
;
main:
@prog::	;-------------------------------------------;
	;                                           ;
	;       stellar object code area            ;
	;                                           ;
	;-------------------------------------------;
;
;	**  run time work area  **
;
		dseg
@rtwork::
arglen:	defs	1	;actual argument length
actarg:	defs	32	;actual argument data
@stptp::defs	1	;stop type (0:HALT , 1: RET, 2: JP nnnn )
@retad::defs	2	;stop type 1 : entry stack pointer value
			;stop type 2 : return address
pshsiz:	defs	2	;push size
pshadr:	defs	2	;push address
retad1:	defs	2	;return address
retad2:	defs	2
@temp::	defs	4	;temporary
;
;	** beginning of variable  **
;
@var::	;-------------------------------------------;
	;                                           ;
	;       global & local variable area        ;
	;                                           ;
	;-------------------------------------------;
;---------------------------------------------------
;-		relocate address table
;---------------------------------------------------

		cseg
;
; code setment
;
crelat::
	defw	@start+1,@stop+1
	defw	@mul.m+1,@mul.r+1
	defw	@div.m+1,@div.r+1
	defw	@rem.m+1,@rem.r+1
	defw	@shl.m+1,@shl.r+1
	defw	@shr.m+1,@shr.r+1	
	defw	@setag+1,@1+1
	defw	@2+1,@3+1
	defw	0
;
; data segment
;
drelat::
	defw	?1+1,??2+2
	defw	?3+1,?4+1
	defw	?5+1,?6+1
	defw	?7+1,?8+1
	defw	?9+1,?10+1
	defw	?11+1,?12+1
	defw	?13+1,?14+1
	defw	?15+1,??16+2
	defw	?17+1
	defw	0
	
;---------------------------------------------------

	end
	